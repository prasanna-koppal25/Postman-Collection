{
	"info": {
		"_postman_id": "7b4bd100-e5b2-442f-95e8-27882e14b152",
		"name": "EDA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "31866046-7b4bd100-e5b2-442f-95e8-27882e14b152"
	},
	"item": [
		{
			"name": "Users- Add Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39d5ae29-73c9-48e5-82cc-bd08705a791f",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test for the correct structure of the response schema\r",
							"pm.test(\"Response schema has the correct structure\", function () {\r",
							"    // Ensure response data is correctly parsed\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    // Validate that responseData is an object\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"\r",
							"    // Validate 'success' property\r",
							"    pm.expect(responseData).to.have.property('success');\r",
							"    pm.expect(responseData.success).to.be.a('boolean');\r",
							"\r",
							"    // Validate 'message' property\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData.message).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b7ad42de-7578-4351-8079-0b1d93cf24cd",
						"exec": [
							"pm.test(\"Check if 'sub' and 'db' query parameter is set\", function () {\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"    const dbParam = queryParams.find(param => param.key === 'db');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"    pm.expect(dbParam).to.not.be.undefined;\r",
							"    pm.expect(dbParam.value).to.equal('pg');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate request body schema\", function () {\r",
							"    const body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
							"\r",
							"    pm.expect(body).to.be.an('object');\r",
							"    pm.expect(body.username).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(body.password).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(body.port).to.be.a('number').that.is.above(0);\r",
							"    pm.expect(body.host).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(body.database).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0a5c38fb-6696-42aa-9397-0a1f8e55cfa0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"root\",\r\n  \"password\": \"root\",\r\n  \"port\": 3306,\r\n  \"host\": \"localhost\",\r\n  \"database\": \"mydata\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/users/add-connection?sub=Ik25&db=mysql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"add-connection"
					],
					"query": [
						{
							"key": "sub",
							"value": "Ik25"
						},
						{
							"key": "db",
							"value": "mysql"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "save user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d188bd81-7232-4c73-a403-a08dff4bffea",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for saved user data\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.Proceed).to.be.a('boolean');\r",
							"  pm.expect(responseData.message).to.be.a('string');\r",
							"  pm.expect(responseData.s_ID).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "682e911c-cd8c-4aa7-9e07-e4abab583e66",
						"exec": [
							"pm.test(\"Validate the request body\", function () {\r",
							"  const requestBody = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
							"\r",
							"  pm.expect(requestBody).to.be.an('object');\r",
							"  pm.expect(requestBody.nickname).to.be.a('string');\r",
							"  pm.expect(requestBody.name).to.be.a('string');\r",
							"  pm.expect(requestBody.email).to.match(/^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/);\r",
							"  pm.expect(requestBody.sid).to.be.a('string');\r",
							"  pm.expect(requestBody.sub).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "14dc40e1-339c-4d7a-9c87-ba69d560e0af",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nickname\": \"Prasanna\",\r\n  \"name\": \"PrasannaKoppal\",\r\n  \"email\": \"Prasanna748@gmail.com\",\r\n  \"sid\": \"sefvekj\",\r\n  \"sub\": \"Ik25\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/save-user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"save-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Authenticate User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85c049d0-7d4a-434b-a1cf-f724dbdd89a9",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - Proceed, message, and sub\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('Proceed');\r",
							"    pm.expect(responseData).to.have.property('message');\r",
							"    pm.expect(responseData).to.have.property('sub');\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the Content-Type header\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a2f5066f-03af-44c7-ae3f-b62a920ec101",
						"exec": [
							"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
							"    // Get the query parameters from the request URL\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    // Find the 'sub' query parameter\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ddf50365-9fb2-48d0-8fc2-da5fa672dc68",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "sub",
						"value": "ha23",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/authenticate-user?sub=lka225",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"authenticate-user"
					],
					"query": [
						{
							"key": "sub",
							"value": "lka225"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Verify Connection",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "74010177-abb5-4a34-a04d-df52e836786f",
						"exec": [
							"// Updated response time test to 300ms\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Updated response time test to 300ms\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// Test for the correct structure of the response schema\r",
							"pm.test(\"Response schema has the correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('Proceed');\r",
							"    pm.expect(responseData).to.have.property('response');\r",
							"    pm.expect(responseData.response).to.be.an('object').that.has.property('message');\r",
							"});\r",
							"\r",
							"//Test for Valid JSON Structure\r",
							"pm.test(\"Response is a valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"//Test for HTTP Headers\r",
							"pm.test(\"Response has correct headers\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.response.to.have.header(\"Content-Length\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a41449cd-79d6-4cbd-a4fe-d61e337629d8",
						"exec": [
							"pm.test(\"Check if 'db' query parameter is set\", function () {\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"    const dbParam = queryParams.find(param => param.key === 'db');\r",
							"    pm.expect(dbParam).to.not.be.undefined;\r",
							"    pm.expect(dbParam.value).to.be.oneOf(['pg', 'mysql']);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate request body schema\", function () {\r",
							"    const body = pm.request.body.raw ? JSON.parse(pm.request.body.raw) : {};\r",
							"\r",
							"    pm.expect(body).to.be.an('object');\r",
							"    pm.expect(body.username).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(body.password).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(body.port).to.be.a('number').that.is.above(0);\r",
							"    pm.expect(body.host).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(body.database).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "b1c87542-a569-4ee4-ae78-71e406e3e65b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "db",
						"value": "pg",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"root\",\r\n  \"password\": \"root\",\r\n  \"port\": 3306,\r\n  \"host\": \"localhost\",\r\n  \"database\": \"mydata\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8000/user/verify-connection?db=mysql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"user",
						"verify-connection"
					],
					"query": [
						{
							"key": "db",
							"value": "mysql"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Users - Delete Connection",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5d97ca13-7f14-40e8-b3c1-bf54b7b790ef",
						"exec": [
							"pm.test(\"Check if 'sub' and 'db' query parameter is set\", function () {\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"    const dbParam = queryParams.find(param => param.key === 'db');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"    pm.expect(dbParam).to.not.be.undefined;\r",
							"    pm.expect(dbParam.value).to.equal('pg');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "80a0c909-c3e6-40c6-be87-6b864c193da4",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - success and message\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.success).to.exist;\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Success field is a boolean and message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.success).to.be.a('boolean');\r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "10f9d77f-58b0-401d-b124-9230156ed68a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/users/delete-connection?sub=lka225&db=pg",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"users",
						"delete-connection"
					],
					"query": [
						{
							"key": "sub",
							"value": "lka225"
						},
						{
							"key": "db",
							"value": "pg"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Connect to Database",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "811530c1-2c89-48a8-9cb7-ca9868091880",
						"exec": [
							"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
							"    // Get the query parameters from the request URL\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    // Find the 'sub' query parameter\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a1122505-819e-43e9-902f-88506680217a",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Pg object structure is valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.pg).to.exist.and.to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure that the 'message' field in the 'pg' object is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.pg.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "7ffcbc9d-e1c2-4961-8884-2b5fb11397e2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/connect?sub=Ik25",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"connect"
					],
					"query": [
						{
							"key": "sub",
							"value": "Ik25"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tables",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c25acf70-8feb-45ae-928b-8130eac71529",
						"exec": [
							"pm.test(\"Check if 'sub' query parameter is set\", function () {\r",
							"    // Get the query parameters from the request URL\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    // Find the 'sub' query parameter\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "96bb12d9-878e-4155-a0dd-25c47c2128e7",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the 'buckets' array\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.buckets).to.be.an('array');\r",
							"    \r",
							"    responseData.buckets.forEach(function(bucket) {\r",
							"        pm.expect(bucket).to.be.an('object');\r",
							"        pm.expect(bucket.key).to.exist.and.to.not.be.empty;\r",
							"        pm.expect(bucket.doc_count).to.exist.and.to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2b924deb-3ff9-46f8-b99f-aed115b571a5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/tables/?sub=lka225",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"tables",
						""
					],
					"query": [
						{
							"key": "sub",
							"value": "lka225"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Detailed_tables",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "348e1922-36cd-4a6f-96a6-7234100aa6b6",
						"exec": [
							"pm.test(\"Check if 'sub', 'page' and 'size' query parameter is set\", function () {\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"    const pageParam = queryParams.find(param => param.key === 'page');\r",
							"    const sizeParam = queryParams.find(param => param.key === 'size');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"    pm.expect(pageParam).to.not.be.undefined;\r",
							"    pm.expect(pageParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"    pm.expect(sizeParam).to.not.be.undefined;\r",
							"    pm.expect(sizeParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4d6fbaf3-294e-43b1-ae9f-2df9e1d68ad8",
						"exec": [
							"// Fixed syntax error in the last test\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Tables array should exist in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.tables).to.exist.and.to.be.an('array');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each table object has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"\r",
							"pm.expect(responseData.tables).to.be.an('array');\r",
							"responseData.tables.forEach(function(table) {\r",
							"    pm.expect(table).to.have.property('platform_type').that.is.a('string');\r",
							"    pm.expect(table).to.have.property('database_name').that.is.a('string');\r",
							"    pm.expect(table).to.have.property('table_name').that.is.a('string');\r",
							"    pm.expect(table).to.have.property('user_name').that.is.a('string');\r",
							"    pm.expect(table).to.have.property('no_of_rows').that.is.a('number');\r",
							"    pm.expect(table).to.have.property('no_of_columns').that.is.a('number');\r",
							"    pm.expect(table).to.have.property('table_description');\r",
							"    pm.expect([null, 'string']).to.include(table.table_description);\r",
							"});\r",
							"\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "f13e0195-23b6-4ba1-a259-d37559455af2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/detailed_tables/?sub=lka225&page=1&size=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"detailed_tables",
						""
					],
					"query": [
						{
							"key": "sub",
							"value": "lka225"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Table-Details",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "10bda89f-5e75-4abf-8b65-053c336d3f51",
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Schema structure and fields within the response are valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.platform_type).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.database_name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.table_name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.no_of_rows).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.no_of_columns).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.user_name).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.size).to.exist.and.to.be.a('number');\r",
							"    pm.expect(responseData.created_at).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.schema).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.sample_data).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.queries).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.profile_data_quality).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.schema_definition).to.exist.and.to.be.a('string');\r",
							"    pm.expect(responseData.lineage).to.exist.and.to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the sample_data object structure and fields within the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.sample_data).to.be.an('object');\r",
							"    pm.expect(responseData.sample_data.first_rows).to.be.an('array');\r",
							"    pm.expect(responseData.sample_data.last_rows).to.be.an('array');\r",
							"    \r",
							"    responseData.sample_data.first_rows.forEach(function(row) {\r",
							"        pm.expect(row).to.be.an('object');\r",
							"        pm.expect(row.batch_id).to.exist.and.to.be.a('number');\r",
							"        // Add more specific checks for other fields within the first_rows array\r",
							"    });\r",
							"    \r",
							"    responseData.sample_data.last_rows.forEach(function(row) {\r",
							"        pm.expect(row).to.be.an('object');\r",
							"        pm.expect(row.batch_id).to.exist.and.to.be.a('number');\r",
							"        // Add more specific checks for other fields within the last_rows array\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.include.all.keys(\r",
							"        'platform_type', \r",
							"        'database_name', \r",
							"        'table_name', \r",
							"        'no_of_rows', \r",
							"        'no_of_columns', \r",
							"        'user_name', \r",
							"        'size', \r",
							"        'created_at', \r",
							"        'schema', \r",
							"        'sample_data', \r",
							"        'queries', \r",
							"        'profile_data_quality', \r",
							"        'schema_definition', \r",
							"        'lineage'\r",
							"    );\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Sample data object structure and fields are valid\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.sample_data).to.be.an('object');\r",
							"    pm.expect(responseData.sample_data.first_rows).to.be.an('array');\r",
							"    pm.expect(responseData.sample_data.last_rows).to.be.an('array');\r",
							"    \r",
							"    responseData.sample_data.first_rows.forEach(function(row) {\r",
							"        pm.expect(row).to.be.an('object');\r",
							"        pm.expect(row.batch_id).to.exist.and.to.be.a('number');\r",
							"        // Add more specific checks for other fields within first_rows if needed\r",
							"    });\r",
							"    \r",
							"    responseData.sample_data.last_rows.forEach(function(row) {\r",
							"        pm.expect(row).to.be.an('object');\r",
							"        pm.expect(row.batch_id).to.exist.and.to.be.a('number');\r",
							"        // Add more specific checks for other fields within last_rows if needed\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "3b071abc-45da-4e13-b90a-f525d9f03e99",
						"exec": [
							"pm.test(\"Check if 'sub', 'database_name' and 'table_name' query parameter is set\", function () {\r",
							"    const queryParams = pm.request.url.query.all();\r",
							"\r",
							"    const subParam = queryParams.find(param => param.key === 'sub');\r",
							"    const database_nameParam = queryParams.find(param => param.key === 'database_name');\r",
							"    const table_nameParam = queryParams.find(param => param.key === 'table_name');\r",
							"\r",
							"    // Check if the 'sub' parameter is defined and not empty\r",
							"    pm.expect(subParam).to.not.be.undefined;\r",
							"    pm.expect(subParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"    pm.expect(database_nameParam).to.not.be.undefined;\r",
							"    pm.expect(database_nameParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"    pm.expect(table_nameParam).to.not.be.undefined;\r",
							"    pm.expect(table_nameParam.value).to.be.a('string').that.is.not.empty;\r",
							"\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c219c6f5-b321-4a4b-8afe-ef0e8158cd21",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8000/table-details/?sub=lka225&database_name=salesforce&table_name=cdc_batch_control",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8000",
					"path": [
						"table-details",
						""
					],
					"query": [
						{
							"key": "sub",
							"value": "lka225"
						},
						{
							"key": "database_name",
							"value": "salesforce"
						},
						{
							"key": "table_name",
							"value": "cdc_batch_control"
						}
					]
				}
			},
			"response": []
		}
	]
}